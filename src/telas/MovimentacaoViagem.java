/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas;

import classes.ConexaoPostgresql;
import classes.Funcoes;
import classes.TextDocument;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Estoque
 */
public class MovimentacaoViagem extends javax.swing.JInternalFrame {

    private ConexaoPostgresql Conexao;
    private ConexaoPostgresql Conexao2;
    private Funcoes Fun;    
    private TextDocument TD;
    private DefaultTableModel tableModel;
    
    String Codigo;
    
    /**
     * Creates new form MovimentacaoViagem
     */
    public MovimentacaoViagem() {
        initComponents();
        CarregarDados();
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MovimentacaoViagem().setVisible(true);
            }
        });
    }

    public void centralizar(JDesktopPane dp) {
        Dimension ds = dp.getSize();
        Dimension dw = this.getSize();
        this.setLocation((ds.width - dw.width) / 2, (ds.height - dw.height) / 2);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jbtAbrirViagem = new javax.swing.JButton();
        jbtFinalizarViagem = new javax.swing.JButton();
        chkViagemAberta = new javax.swing.JCheckBox();
        chkViagemFinalizada = new javax.swing.JCheckBox();
        chkTodasViagens = new javax.swing.JCheckBox();
        jbtAtualizar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jbtAtualizaSaldo = new javax.swing.JButton();

        setClosable(true);
        setTitle("Viagem");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Técnico", "Destino", "Data Inicial", "Data Final"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(300);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(300);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(150);
        }

        jbtAbrirViagem.setText("Abrir Viagem");
        jbtAbrirViagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAbrirViagemActionPerformed(evt);
            }
        });

        jbtFinalizarViagem.setText("Finalizar Viagem");
        jbtFinalizarViagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtFinalizarViagemActionPerformed(evt);
            }
        });

        buttonGroup1.add(chkViagemAberta);
        chkViagemAberta.setSelected(true);
        chkViagemAberta.setText("Viagens em aberto");
        chkViagemAberta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkViagemAbertaActionPerformed(evt);
            }
        });

        buttonGroup1.add(chkViagemFinalizada);
        chkViagemFinalizada.setText("Viagens Finalizadas");
        chkViagemFinalizada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkViagemFinalizadaActionPerformed(evt);
            }
        });

        buttonGroup1.add(chkTodasViagens);
        chkTodasViagens.setText("Exibir Todas");
        chkTodasViagens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkTodasViagensActionPerformed(evt);
            }
        });

        jbtAtualizar.setText("Atualizar");
        jbtAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAtualizarActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Status", "Código", "Produto", "Qtde", "Devolvida", "Saldo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable2KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(30);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(50);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setPreferredWidth(50);
            jTable2.getColumnModel().getColumn(3).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setPreferredWidth(350);
            jTable2.getColumnModel().getColumn(4).setResizable(false);
            jTable2.getColumnModel().getColumn(4).setPreferredWidth(50);
            jTable2.getColumnModel().getColumn(5).setResizable(false);
            jTable2.getColumnModel().getColumn(6).setResizable(false);
        }

        jbtAtualizaSaldo.setText("Atualizar Saldo");
        jbtAtualizaSaldo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAtualizaSaldoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbtAbrirViagem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtFinalizarViagem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtAtualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                        .addComponent(chkViagemAberta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkViagemFinalizada)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkTodasViagens))
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbtAtualizaSaldo)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtAbrirViagem)
                    .addComponent(jbtFinalizarViagem)
                    .addComponent(chkViagemAberta)
                    .addComponent(chkViagemFinalizada)
                    .addComponent(chkTodasViagens)
                    .addComponent(jbtAtualizar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtAtualizaSaldo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtAbrirViagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAbrirViagemActionPerformed
        
        MovimentacaoViagemAbrir A = new MovimentacaoViagemAbrir();
        A.setVisible(true);
        JDesktopPane JDP = this.getDesktopPane();
        JDP.add(A);
        A.centralizar(JDP);
        try{
            A.setSelected(true);
        }catch (Exception E){
            JOptionPane.showMessageDialog(null, "Erro: " + E);
        }
        A.setVisible(true);
        
    }//GEN-LAST:event_jbtAbrirViagemActionPerformed

    private void jbtFinalizarViagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtFinalizarViagemActionPerformed
        
//        MovimentacaoViagemFechar A = new MovimentacaoViagemFechar();
//        A.setVisible(true);
//        JDesktopPane JDP = this.getDesktopPane();
//        JDP.add(A);
//        A.centralizar(JDP);
//        try{
//            A.setSelected(true);
//            A.SetCidade(this);
//            A.Validador("Agenda");
//        }catch (Exception E){
//            JOptionPane.showMessageDialog(null, "Erro: " + E);
//        }
//        A.setVisible(true);
        
        String Qtde_Devolvida;        
        String Viagem_cod = null;
        
//        if (jtfCodigo.getText().equals("")){
//            Fun = new Funcoes();
//            jtfCodigo.setText(Fun.Proximo("codigo", "t_viagem", ""));
//        }

        Conexao = new ConexaoPostgresql();
        Conexao.Conectar();
        Conexao.setSQL("select * from t_viagem where codigo = " + Codigo + " and exclusao = 0");
        ResultSet RS = Conexao.Consultar();

        String myDate = null;

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        myDate = sdf.format(new java.util.Date());        

        try {
            if(RS.next()){
                String SQL;
                
                SQL = "update t_viagem set data_finalizar = '" + myDate + "' ";
                SQL = SQL + "where codigo = " + Codigo + " "; 
                SQL = SQL + "and exclusao = 0";
                
                Conexao.setSQL(SQL);
                Conexao.Executar();                
                
                int linha_total = jTable2.getRowCount();
                int contador = 1;
                
                while(contador <= linha_total){
                
                    int linha = contador - 1;

                    String SQL2 = null;

                    String CodigoItem = "", QtdeDevolvida = "", Saldo = "";
                    
                    Fun = new Funcoes();
                    
                    CodigoItem = jTable2.getValueAt(linha, 0).toString();
                    QtdeDevolvida = jTable2.getValueAt(linha, 5).toString();
                    Saldo = jTable2.getValueAt(linha, 6).toString();

                    SQL2 = "update t_viagem_item set ";
                    SQL2 = SQL2 + "qtde_devolvida = " + QtdeDevolvida + " ";
                    SQL2 = SQL2 + "where codigo = " + CodigoItem + " ";
                    SQL2 = SQL2 + "and codigo_viagem = " + Codigo + " ";
                    SQL2 = SQL2 + "and exclusao = 0 ";

                    Conexao2 = new ConexaoPostgresql();
                    Conexao2.Conectar();
                    Conexao2.setSQL(SQL2);
                    Conexao2.Executar();
                    
                    SaldoEstoque(CodigoItem, Saldo);
                    
                    contador++;

                }
                
            }
            
        } catch (Exception Erro) {
            JOptionPane.showMessageDialog(null, "Erro na validação: " + Erro);
        }
        
        Conexao.Desconectar();
        Conexao2.Desconectar();
        
        Reload();
        
    }//GEN-LAST:event_jbtFinalizarViagemActionPerformed

    private void jbtAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAtualizarActionPerformed
        
        Reload();
        
    }//GEN-LAST:event_jbtAtualizarActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        
        DefaultTableModel tableModel2 =(DefaultTableModel) jTable2.getModel();  
        tableModel2.setNumRows(0); 
        
        Codigo = jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();
        
        CarregarDadosItens(String.valueOf(Codigo));
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void jbtAtualizaSaldoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAtualizaSaldoActionPerformed
        
        AtualizaSaldo();
        
    }//GEN-LAST:event_jbtAtualizaSaldoActionPerformed

    private void jTable2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable2KeyPressed
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            AtualizaSaldo();
        }
        
    }//GEN-LAST:event_jTable2KeyPressed

    private void chkViagemAbertaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkViagemAbertaActionPerformed
        CarregarDados();
    }//GEN-LAST:event_chkViagemAbertaActionPerformed

    private void chkViagemFinalizadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkViagemFinalizadaActionPerformed
        CarregarDados();
    }//GEN-LAST:event_chkViagemFinalizadaActionPerformed

    private void chkTodasViagensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkTodasViagensActionPerformed
        CarregarDados();
    }//GEN-LAST:event_chkTodasViagensActionPerformed

    private void AtualizaSaldo(){
        
        int linha_total = jTable2.getRowCount();
        DefaultTableModel tabela = (DefaultTableModel) jTable2.getModel();
        int contador = 1;

        while(contador <= linha_total){

            int linha = contador - 1;

            String Qtde, Qtde_D;
            int Saldo;

            Fun = new Funcoes();

            Qtde = jTable2.getValueAt(linha, 4).toString();
            Qtde_D = jTable2.getValueAt(linha, 5).toString();
            Saldo = Integer.parseInt(Qtde) - Integer.parseInt(Qtde_D);
                        
            tabela.setValueAt(String.valueOf(Saldo), linha, 6);
            
            contador++;

        }
        
    }
    
    public void CarregarDados(){
        
//        Limpar();
        
        String SQL;
        
        SQL = "select tv.codigo, to_char(tv.data_abrir,'DD/MM/YYYY') as dataabrir, ";
        SQL = SQL + "to_char(tv.data_finalizar,'DD/MM/YYYY') as datafinalizar, ";
        SQL = SQL + "tv.destino, tv.tecnico_cod, (tp.nome) as tecnico ";
        SQL = SQL + "from t_viagem tv ";
        SQL = SQL + "inner join t_pessoa tp on tp.codigo = tv.tecnico_cod ";
        SQL = SQL + "where tv.exclusao = 0 ";
        
        if (chkViagemAberta.isSelected()){
            SQL = SQL + "and tv.data_finalizar is null ";
        } else if (chkViagemFinalizada.isSelected()){
            SQL = SQL + "and tv.data_finalizar is not null ";
        }
        
        Conexao = new ConexaoPostgresql();
        Conexao.Conectar() ;
        Conexao.setSQL(SQL);

        ResultSet RS = Conexao.Consultar();
        
        try{
            while (RS.next()){
                DefaultTableModel Tabela = (DefaultTableModel) jTable1.getModel();
                Object[] CarLinha = {RS.getString("codigo"),RS.getString("tecnico"),RS.getString("destino"),RS.getString("dataabrir"),RS.getString("datafinalizar"),};
                Tabela.addRow(CarLinha);
            }
        }catch (Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro na validação: " + Erro);
        }
      
        Conexao.Desconectar();
        
    }
    
    public void CarregarDadosItens(String Codigo) {
        
        String SQL2;
        
        SQL2 = "select tvi.codigo, tvi.produto_cod, (tpr.nome) as produto, tvi.qtde_liberada, tvi.qtde_devolvida ";
        SQL2 = SQL2 + "from t_viagem_item tvi ";
        SQL2 = SQL2 + "inner join t_produto tpr on tpr.codigo = tvi.produto_cod ";
        SQL2 = SQL2 + "where tvi.codigo_viagem = " + Codigo + " ";
        SQL2 = SQL2 + "and tvi.exclusao = 0 ";
        
        Conexao2 = new ConexaoPostgresql();
        Conexao2.Conectar() ;
        Conexao2.setSQL(SQL2);

        ResultSet RS2 = Conexao2.Consultar();
        
        try{
            while (RS2.next()){
                
                int Saldo = Integer.parseInt(RS2.getString("qtde_liberada")) - Integer.parseInt(RS2.getString("qtde_devolvida"));
                
                DefaultTableModel Tabela = (DefaultTableModel) jTable2.getModel();
                Object[] CarLinha = {RS2.getString("codigo"),"UPD",RS2.getString("produto_cod"),RS2.getString("produto"),RS2.getString("qtde_liberada"),RS2.getString("qtde_devolvida"),Saldo};
                Tabela.addRow(CarLinha);
                
            }            
        }catch (Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro na validação: " + Erro);
        }
        
        Conexao2.Desconectar();      
        
    }
    
    private void Limpar (){
        
        Reload();
        
    }
    
    private void SaldoEstoque(String CodigoProduto, String Qtde) {
        
        int SaldoBD = Integer.parseInt(QtdeEmEstoque(CodigoProduto));
        int QtdeInc = Integer.parseInt(Qtde);
        int QtdeReal = SaldoBD - QtdeInc;
                        
        AtualizarEstoque(CodigoProduto, String.valueOf(QtdeReal)); 
        
    }
    
    private void AtualizarEstoque(String CodigoProduto, String Qtde){
        
        String SQL;
        
        SQL = "update t_produto set qtde = " + Qtde + " where codigo = " + CodigoProduto + " ";
        
        Conexao = new ConexaoPostgresql();
        Conexao.Conectar() ;
        Conexao.setSQL(SQL);
        Conexao.Executar();
        Conexao.Desconectar();
        
    }

    private String QtdeEmEstoque (String Produto) {
        
        String Saldo = null;
        String SQL;
        
        SQL = "select qtde from t_produto where codigo = " + Produto + " ";
        
        Conexao = new ConexaoPostgresql();
        Conexao.Conectar() ;
        Conexao.setSQL(SQL);
        
        ResultSet RS = Conexao.Consultar();
        
        try{
            if (RS.next()){
                Saldo = RS.getString("qtde");
            }
        }catch (Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro na validação: " + Erro);
        }
        
        Conexao.Desconectar();
        
        return Saldo;
        
    }

    private void Reload(){
        
        DefaultTableModel tableModel =(DefaultTableModel) jTable1.getModel();  
        tableModel.setNumRows(0);
        
        DefaultTableModel tableModel2 =(DefaultTableModel) jTable2.getModel();  
        tableModel2.setNumRows(0); 
        
        CarregarDados();
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkTodasViagens;
    private javax.swing.JCheckBox chkViagemAberta;
    private javax.swing.JCheckBox chkViagemFinalizada;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton jbtAbrirViagem;
    private javax.swing.JButton jbtAtualizaSaldo;
    private javax.swing.JButton jbtAtualizar;
    private javax.swing.JButton jbtFinalizarViagem;
    // End of variables declaration//GEN-END:variables
}
