/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas;

import classes.ConexaoPostgresql;
import classes.Funcoes;
import classes.TextDocument;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Locale;
import java.util.UUID;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Tecsuport
 */
public class MovimentacaoSaida extends javax.swing.JInternalFrame {

    private ConexaoPostgresql Conexao;
    private ConexaoPostgresql Conexao2;
    private Funcoes Fun;    
    private TextDocument TD;
    
    int CapturarLinha;
    double ValorTotal = 0;
    
    /**
     * Creates new form MovimentacaoEntrada
     */
    public MovimentacaoSaida() {
        initComponents();
        Limpar();
    }
    
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroAgenda().setVisible(true);
            }
        });
    }

    public void centralizar(JDesktopPane dp) {
        Dimension ds = dp.getSize();
        Dimension dw = this.getSize();
        this.setLocation((ds.width - dw.width) / 2, (ds.height - dw.height) / 2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlbCodigo = new javax.swing.JLabel();
        jtfCodigo = new javax.swing.JFormattedTextField();
        jtfDanfe = new javax.swing.JFormattedTextField();
        jlbDanfe = new javax.swing.JLabel();
        jdcDataDanfe = new com.toedter.calendar.JDateChooser();
        jlbDataDanfe = new javax.swing.JLabel();
        jdcDataSistema = new com.toedter.calendar.JDateChooser();
        jlbDataSistema = new javax.swing.JLabel();
        jlbCliente = new javax.swing.JLabel();
        jtfCodigoCliente = new javax.swing.JFormattedTextField();
        jtfNomeCliente = new javax.swing.JFormattedTextField();
        jtfCodigoProduto = new javax.swing.JFormattedTextField();
        jlbProduto = new javax.swing.JLabel();
        jtfNomeProduto = new javax.swing.JFormattedTextField();
        jlbQtde = new javax.swing.JLabel();
        jtfQtde = new javax.swing.JFormattedTextField();
        jtfPreco = new javax.swing.JFormattedTextField();
        jlbPrelco = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jbtPesquisar = new javax.swing.JButton();
        jbtExcluir = new javax.swing.JButton();
        jbtSalvar = new javax.swing.JButton();
        jbtNovo = new javax.swing.JButton();
        jlbObs = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtpObs = new javax.swing.JTextPane();
        jbtAdd = new javax.swing.JButton();
        jbtDel = new javax.swing.JButton();
        jtfValorTotal = new javax.swing.JFormattedTextField();
        jlbValorTotal = new javax.swing.JLabel();
        jlbPedido = new javax.swing.JLabel();
        jtfPedido = new javax.swing.JFormattedTextField();

        setClosable(true);
        setTitle("Movimentação de Saída");
        setToolTipText("");

        jlbCodigo.setText("Código");

        jtfCodigo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jtfCodigo.setEnabled(false);

        jlbDanfe.setText("DANFE");

        jlbDataDanfe.setText("Data da DANFE");

        jdcDataSistema.setEnabled(false);

        jlbDataSistema.setText("Data do Sistema");

        jlbCliente.setText("Cliente (F12)");

        jtfCodigoCliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfCodigoClienteFocusLost(evt);
            }
        });
        jtfCodigoCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfCodigoClienteKeyPressed(evt);
            }
        });

        jtfNomeCliente.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jtfNomeCliente.setEnabled(false);

        jtfCodigoProduto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfCodigoProdutoFocusLost(evt);
            }
        });
        jtfCodigoProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfCodigoProdutoKeyPressed(evt);
            }
        });

        jlbProduto.setText("Produto (F12)");

        jtfNomeProduto.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jtfNomeProduto.setEnabled(false);

        jlbQtde.setText("Qtde");

        jlbPrelco.setText("Preço");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Status", "Ordem", "Cód Produto", "Produto", "Qtde", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(400);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(100);
        }

        jbtPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Pesquisa.png"))); // NOI18N
        jbtPesquisar.setText("Pesquisar");
        jbtPesquisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtPesquisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtPesquisarActionPerformed(evt);
            }
        });

        jbtExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Excluir.png"))); // NOI18N
        jbtExcluir.setText("Excluir");
        jbtExcluir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtExcluir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtExcluirActionPerformed(evt);
            }
        });

        jbtSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Salvar.png"))); // NOI18N
        jbtSalvar.setText("Salvar");
        jbtSalvar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtSalvar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSalvarActionPerformed(evt);
            }
        });

        jbtNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Novo.png"))); // NOI18N
        jbtNovo.setText("Novo");
        jbtNovo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtNovo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtNovoActionPerformed(evt);
            }
        });

        jlbObs.setText("OBS");

        jScrollPane2.setViewportView(jtpObs);

        jbtAdd.setText("ADD");
        jbtAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAddActionPerformed(evt);
            }
        });

        jbtDel.setText("DEL");
        jbtDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtDelActionPerformed(evt);
            }
        });

        jtfValorTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfValorTotal.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jtfValorTotal.setEnabled(false);

        jlbValorTotal.setText("Valor Total:");

        jlbPedido.setText("Pedido");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jlbProduto)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jtfCodigoProduto, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                        .addComponent(jtfCodigoCliente, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(jtfCodigo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                                        .addComponent(jlbCodigo, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jtfNomeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jlbQtde)
                                                .addComponent(jtfQtde, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jtfPreco, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(jbtAdd)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(jbtDel))
                                                .addComponent(jlbPrelco)))
                                        .addComponent(jtfNomeCliente)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(1, 1, 1)
                                                    .addComponent(jlbPedido)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jtfPedido)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jtfDanfe, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jlbDanfe))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jdcDataDanfe, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jlbDataDanfe))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jlbDataSistema)
                                                .addComponent(jdcDataSistema, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(178, 178, 178))))
                                .addComponent(jScrollPane1))
                            .addComponent(jlbCliente))
                        .addGap(0, 5, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbtNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jbtSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jbtExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jbtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlbObs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jlbValorTotal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlbCodigo)
                            .addComponent(jlbPedido))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlbDanfe)
                            .addComponent(jlbDataDanfe)
                            .addComponent(jlbDataSistema))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfDanfe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jdcDataDanfe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jdcDataSistema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlbCliente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtfNomeCliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfCodigoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlbProduto)
                    .addComponent(jlbQtde)
                    .addComponent(jlbPrelco))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfCodigoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfNomeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfQtde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfPreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtAdd)
                    .addComponent(jbtDel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbValorTotal)
                    .addComponent(jlbObs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtPesquisarActionPerformed

        PesquisaSaida A = new PesquisaSaida();
        A.setVisible(true);
        JDesktopPane JDP = this.getDesktopPane();
        JDP.add(A);
        A.centralizar(JDP);
        try{
            A.setSelected(true);
            A.SetSaida(this);
            A.Validador("Saida");
        }catch (Exception E){
            JOptionPane.showMessageDialog(null, "Erro: " + E);
        }
        A.setVisible(true);

    }//GEN-LAST:event_jbtPesquisarActionPerformed

    private void jbtExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtExcluirActionPerformed

        if (!(jtfCodigo.getText().trim().equals(""))) {

            Object[] botoes = { "Sim", "Não" };

            int resposta;

            resposta = JOptionPane.showOptionDialog(null, "Você deseja realmente excluir este registro?", "Confirma exclusão", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE, null, botoes, botoes[0]);

            if(resposta == JOptionPane.YES_OPTION){

                String SQL, SQL2;
                
                SQL = "update t_saida set exclusao = 1 where codigo = " + jtfCodigo.getText() + " ";

                Conexao = new ConexaoPostgresql();
                Conexao.Conectar();
                Conexao.setSQL(SQL);
                Conexao.Executar();
                Conexao.Desconectar();
                
                int linha_total = jTable1.getRowCount();
                int contador = 1;
                
                while(contador <= linha_total){

                    int linha = contador - 1;

                    String SaidaCod = "", Ordem = "", CodigoProduto = "",  Qtde = "";

                    Fun = new Funcoes();    

                    SaidaCod = jtfCodigo.getText();
                    Ordem = jTable1.getValueAt(linha, 1).toString();
                    CodigoProduto = jTable1.getValueAt(linha, 2).toString();
                    Qtde = jTable1.getValueAt(linha, 4).toString();

                    SQL2 = "update t_saida_item set ";
                    SQL2 = SQL2 + "exclusao = 1 ";
                    SQL2 = SQL2 + "where codigo = " + Ordem + " ";
                    SQL2 = SQL2 + "and saida_cod = " + SaidaCod + " ";

                    Conexao2 = new ConexaoPostgresql();
                    Conexao2.Conectar();
                    Conexao2.setSQL(SQL2);
                    Conexao2.Executar();

                    int SaldoBD = Integer.parseInt(QtdeEmEstoque(CodigoProduto));
                    int QtdeDel = Integer.parseInt(Qtde);
                    int QtdeReal = SaldoBD - QtdeDel;

                    AtualizarEstoque(CodigoProduto, String.valueOf(QtdeReal));

                    contador++;

                }

                Limpar();

            }

            jtfDanfe.requestFocus();

        }

    }//GEN-LAST:event_jbtExcluirActionPerformed

    private void jbtSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSalvarActionPerformed

        String Entrada_Cod = null;
        
        if (jtfCodigo.getText().equals("")){
            Fun = new Funcoes();
            jtfCodigo.setText(Fun.Proximo("codigo", "t_saida", ""));
        }

        Conexao = new ConexaoPostgresql();
        Conexao.Conectar();
        Conexao.setSQL("select * from t_saida where codigo = " + jtfCodigo.getText() + " and exclusao = 0 ");
        ResultSet RS = Conexao.Consultar();

        String myDateDanfe = null;
        String myDateSistema = null;
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        myDateDanfe = sdf.format(jdcDataDanfe.getDate());
        myDateSistema = sdf.format(jdcDataSistema.getDate());

        try {
            if(RS.next()){
                String SQL;

                SQL = "update t_saida set fornecedor_cod = " + jtfCodigoCliente.getText() + ", ";
                SQL = SQL + "obs = '" + jtpObs.getText() + "' ";
                SQL = SQL + "where codigo = " + jtfCodigo.getText() + " ";

                Conexao.setSQL(SQL);
                Conexao.Executar();                
                
                int linha_total = jTable1.getRowCount();
                int contador = 1;
                
                while(contador <= linha_total){
                
                    int linha = contador - 1;

                    String SQL2 = null;

                    String Status = "", SaidaCod = "", Ordem = "", CodigoProduto = "",  NomeProduto = "", Qtde = "", Valor = "";
                    
                    Fun = new Funcoes();
                    
                    Status = jTable1.getValueAt(linha, 0).toString();
                    SaidaCod = jtfCodigo.getText();
                    Ordem = jTable1.getValueAt(linha, 1).toString();
                    CodigoProduto = jTable1.getValueAt(linha, 2).toString();
//                    NomeProduto = jTable1.getValueAt(linha, 2).toString();
                    Qtde = jTable1.getValueAt(linha, 4).toString();
                    Valor = jTable1.getValueAt(linha, 5).toString().replace(",","").replace(",","."); 

                    if (Status.equals("UPD")){

                        SQL2 = "update t_saida_item set ";
                        SQL2 = SQL2 + "produto_cod = " + CodigoProduto + ", ";
                        SQL2 = SQL2 + "qtde = " + Qtde + ", ";
                        SQL2 = SQL2 + "valor = " + Valor + " ";
                        SQL2 = SQL2 + "where codigo = " + Ordem + " ";
                        SQL2 = SQL2 + "and saida_cod = " + SaidaCod + " ";
                        SQL2 = SQL2 + "and exclusao = 0 ";

                        Conexao2 = new ConexaoPostgresql();
                        Conexao2.Conectar();
                        Conexao2.setSQL(SQL2);
                        Conexao2.Executar();

                    } else if (Status.equals("DEL")){
                        
                        SQL2 = "update t_saida_item set ";
                        SQL2 = SQL2 + "exclusao = 1 ";
                        SQL2 = SQL2 + "where codigo = " + Ordem + " ";
                        SQL2 = SQL2 + "and saida_cod = " + SaidaCod + " ";
                        
                        Conexao2 = new ConexaoPostgresql();
                        Conexao2.Conectar();
                        Conexao2.setSQL(SQL2);
                        Conexao2.Executar();
                        
                        int SaldoBD = Integer.parseInt(QtdeEmEstoque(CodigoProduto));
                        int QtdeDel = Integer.parseInt(Qtde);
                        int QtdeReal = SaldoBD + QtdeDel;
                        
                        AtualizarEstoque(CodigoProduto, String.valueOf(QtdeReal));
                        
                        
                    } else if (Status.equals("INC")){
                        
                        SQL2 = "insert into t_saida_item (saida_cod, produto_cod, qtde, valor, exclusao) ";
                        SQL2 = SQL2 + "values (";
                        SQL2 = SQL2 + "" + SaidaCod + ", ";
                        SQL2 = SQL2 + "" + CodigoProduto + ", ";
                        SQL2 = SQL2 + "" + Qtde + ", ";
                        SQL2 = SQL2 + "" + Valor + ", ";
                        SQL2 = SQL2 + "0)";

                        Conexao2 = new ConexaoPostgresql();
                        Conexao2.Conectar();
                        Conexao2.setSQL(SQL2);
                        Conexao2.Executar();
                        
                        int SaldoBD = Integer.parseInt(QtdeEmEstoque(CodigoProduto));
                        int QtdeInc = Integer.parseInt(Qtde);
                        int QtdeReal = SaldoBD - QtdeInc;
                        
                        AtualizarEstoque(CodigoProduto, String.valueOf(QtdeReal));
                        
                    }
                    
                    contador++;

                }
  
            } else {
                String SQL, Senha;

                UUID uuid = UUID.randomUUID();    
                String myRandom = uuid.toString();    
                Senha = myRandom.substring(0,8);
                
                SQL = "insert into t_saida (pedido, danfe, data_danfe, data_sistema, fornecedor_cod, obs, senha, exclusao) ";
                SQL = SQL + "values ('" + jtfPedido.getText() + "', '" + jtfDanfe.getText() + "', '" + myDateDanfe + "', '";
                SQL = SQL + myDateSistema + "', " + jtfCodigoCliente.getText() + ", '" + jtpObs.getText() + "', '" + Senha + "', 0)";

                Conexao.setSQL(SQL);
                Conexao.Executar(); 
                
                int linha_total = jTable1.getRowCount();
                int contador = 1;
                
                Entrada_Cod = BuscaCodigoSenha(Senha);
                
                while(contador <= linha_total){
                
                    int linha = contador - 1;

                    String SQL2 = null;

                    String Status = "", CodigoProduto = "",  NomeProduto = "", Qtde = "", Valor = "";

//                    Status = "INC";
                    Fun = new Funcoes();
                    
                    Status = jTable1.getValueAt(linha, 0).toString();
                    CodigoProduto = jTable1.getValueAt(linha, 2).toString();
//                    NomeProduto = jTable1.getValueAt(linha, 2).toString();
                    Qtde = jTable1.getValueAt(linha, 4).toString();
                    Valor = jTable1.getValueAt(linha, 5).toString().replace(",","").replace(",","."); 

                    if (Status.equals("INC")){

                        SQL2 = "insert into t_saida_item (saida_cod, produto_cod, qtde, valor, exclusao) ";
                        SQL2 = SQL2 + "values (";
                        SQL2 = SQL2 + "" + Entrada_Cod + ", ";
                        SQL2 = SQL2 + "" + CodigoProduto + ", ";
                        SQL2 = SQL2 + "" + Qtde + ", ";
                        SQL2 = SQL2 + "" + Valor + ", ";
                        SQL2 = SQL2 + "0)";

                        Conexao2 = new ConexaoPostgresql();
                        Conexao2.Conectar();
                        Conexao2.setSQL(SQL2);
                        Conexao2.Executar();
                        
                        int SaldoBD = Integer.parseInt(QtdeEmEstoque(CodigoProduto));
                        int QtdeInc = Integer.parseInt(Qtde);
                        int QtdeReal = SaldoBD - QtdeInc;
                        
                        AtualizarEstoque(CodigoProduto, String.valueOf(QtdeReal));                       

                    }
                    
                    contador++;

                }
                
                LimpaSenha(Entrada_Cod);
                
            }

        } catch (Exception Erro) {
            JOptionPane.showMessageDialog(null, "Erro na validação: " + Erro);
        }

        Conexao.Desconectar();
        Conexao2.Desconectar();

        Limpar();

        jtfDanfe.requestFocus();

    }//GEN-LAST:event_jbtSalvarActionPerformed

    private void jbtNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtNovoActionPerformed

        Limpar();

        jtfDanfe.requestFocus();
        
        jbtSalvar.setEnabled(true);
        
    }//GEN-LAST:event_jbtNovoActionPerformed

    private void jtfCodigoClienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfCodigoClienteFocusLost

        if (!(jtfCodigoCliente.getText().trim().equals(""))) {
        
            jtfNomeCliente.setText(NomeFornecedor(Integer.parseInt(jtfCodigoCliente.getText())));
            
            jtfCodigoProduto.requestFocus();
        
        }
        
    }//GEN-LAST:event_jtfCodigoClienteFocusLost

    private void jtfCodigoClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfCodigoClienteKeyPressed
    
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
           
            jtfNomeCliente.setText(NomeFornecedor(Integer.parseInt(jtfCodigoCliente.getText())));
            
            jtfCodigoProduto.requestFocus();

        }
        
        if(evt.getKeyCode() == KeyEvent.VK_F12){
        
            SubPesquisaPessoa A = new SubPesquisaPessoa();
            A.setVisible(true);
            JDesktopPane JDP = this.getDesktopPane();
            JDP.add(A);
            A.centralizar(JDP);
            try{
                A.setSelected(true);
                A.SetSubFornecedor(this);
                A.Validador("FornecedorSaida");
            }catch (Exception E){
                JOptionPane.showMessageDialog(null, "Erro: " + E);
            }
            A.setVisible(true);
            
        }        
        
    }//GEN-LAST:event_jtfCodigoClienteKeyPressed

    private void jtfCodigoProdutoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfCodigoProdutoFocusLost
        
        if (!(jtfCodigoProduto.getText().trim().equals(""))) {
        
            jtfNomeProduto.setText(NomeProduto(Integer.parseInt(jtfCodigoProduto.getText())));
            
            jtfQtde.requestFocus();
        
        }
        
    }//GEN-LAST:event_jtfCodigoProdutoFocusLost

    private void jtfCodigoProdutoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfCodigoProdutoKeyPressed
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
           
            jtfNomeProduto.setText(NomeProduto(Integer.parseInt(jtfCodigoProduto.getText())));
            
            jtfQtde.requestFocus();

        }
        
        if(evt.getKeyCode() == KeyEvent.VK_F12){
        
            SubPesquisaProduto A = new SubPesquisaProduto();
            A.setVisible(true);
            JDesktopPane JDP = this.getDesktopPane();
            JDP.add(A);
            A.centralizar(JDP);
            try{
                A.setSelected(true);
                A.SetSubProdutoSaida(this);
                A.Validador("ProdutoMovimentacaoSaida");
            }catch (Exception E){
                JOptionPane.showMessageDialog(null, "Erro: " + E);
            }
            A.setVisible(true);
            
        }
        
    }//GEN-LAST:event_jtfCodigoProdutoKeyPressed

    private void jbtAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAddActionPerformed
        
        NumberFormat numberFormatter = NumberFormat.getNumberInstance(Locale.US);
        
        String Status = "", CodigoProduto, NomeProduto, Qtde;
        Double Valor;
        
        Status = "INC";
        CodigoProduto = jtfCodigoProduto.getText();
        NomeProduto = jtfNomeProduto.getText();
        Qtde = jtfQtde.getText();
        
        //Funciona nas 'Janelas'
        Valor = Double.parseDouble(jtfPreco.getText().replace(".","").replace(",","."));
        
        //Funciona em Linux
        //Valor = Double.parseDouble(jtfValor.getText().replace(",",""));
        
        DecimalFormat df = new DecimalFormat ("#,##0.00", new DecimalFormatSymbols (new Locale ("us", "US"))); 
        String strValor = df.format(Valor);
        
//        ValorTotal = ValorTotal + Valor;
//        
//        jtfValorTotal.setText(String.valueOf(ValorTotal));
        
        try{

            DefaultTableModel Tabela = (DefaultTableModel) jTable1.getModel();
            Object[] CarLinha = {Status, "", CodigoProduto, NomeProduto, Qtde, strValor, ""};
            Tabela.addRow(CarLinha);

        }catch (Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro na validação: " + Erro);
        }        
        
        jtfCodigoProduto.setText("");
        jtfNomeProduto.setText("");
        jtfQtde.setText("");
        jtfPreco.setText("");
        
        ReCalculoTabela();
        
        jtfCodigoProduto.requestFocus();        
        
    }//GEN-LAST:event_jbtAddActionPerformed

    private void jbtDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtDelActionPerformed
        
        String Operacao = "DEL";

        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        int Linha = CapturarLinha;

        String OP = String.valueOf(modelo.getValueAt(CapturarLinha, 0));

        if (OP.equals("DEL")){
            if (jtfCodigo.getText().trim().equals("")) {
                Operacao = "INC";
            } else {
                Operacao = "UPD";
            }
            modelo.setValueAt(Operacao, Linha, 0);
        } else {
            Operacao = "DEL";
            modelo.setValueAt(Operacao, Linha, 0);
        }
        
        ReCalculoTabela();
        
    }//GEN-LAST:event_jbtDelActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        
        CapturarLinha = jTable1.getSelectedRow();
        
    }//GEN-LAST:event_jTable1MouseClicked
    
    private void ReCalculoTabela(){
        
        int linha_total = jTable1.getRowCount();
        int contador = 1;
        double vlr = 0;
        ValorTotal = 0;
        
//        if (linha_total == 0){
//            
//            vlr = Double.parseDouble(jtfQtde.getText()) * Double.parseDouble(jtfPreco.getText());
//                
//            ValorTotal = ValorTotal + vlr;
//
//            jtfValorTotal.setText(String.valueOf(ValorTotal));
//            
//        } else {
            
            while(contador <= linha_total){

                int linha = contador - 1;

                String Status = "", StatusTabela = "", Qtde = "", Valor = "";

                Status = "INC";
                Fun = new Funcoes();

                StatusTabela = jTable1.getValueAt(linha, 0).toString();
                Qtde = jTable1.getValueAt(linha, 4).toString();
                Valor = jTable1.getValueAt(linha, 5).toString().replace(",","").replace(",","."); 

                if (StatusTabela.equals("INC") || StatusTabela.equals("UPD")){

                    vlr = Double.parseDouble(Qtde) * Double.parseDouble(Valor);

                    ValorTotal = ValorTotal + vlr;

                    jtfValorTotal.setText(String.valueOf(ValorTotal));                    

                }
                
                contador++;

            }
            
//        }        
        
    }
    
    public String NomeFornecedor (int CodigoFabricante){
    
        String Fabricante = null;
        
        Fun = new Funcoes();
        Fabricante = Fun.NomePessoa(CodigoFabricante);
        
        return Fabricante;        
    
    }
    
    public void NomeFornecedorViaF12 (int CodigoFabricante){
        
        jtfCodigoCliente.setText(String.valueOf(CodigoFabricante));
        jtfNomeCliente.setText(NomeFornecedor(CodigoFabricante));
        
    }
    
    public String NomeProduto (int CodigoProduto){
    
        String Produto = null;
        
        Fun = new Funcoes();
        Produto = Fun.NomeProduto(CodigoProduto);
        
        return Produto;        
    
    }
    
    public void NomeProdutoViaF12 (int CodigoProduto){
        
        jtfCodigoProduto.setText(String.valueOf(CodigoProduto));
        jtfNomeProduto.setText(NomeProduto(CodigoProduto));
        
    }    
    
    private String BuscaCodigoSenha (String password){
        
        String SQL;
        String Codigo = null;
        
        SQL = "select codigo from t_saida where senha = '" + password + "' and exclusao = 0 ";
        
        Conexao = new ConexaoPostgresql();
        Conexao.Conectar() ;
        Conexao.setSQL(SQL);

        ResultSet RS = Conexao.Consultar();
        
        try{
            if (RS.next()){
                Codigo = RS.getString("codigo");
            }
        }catch (Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro na validação: " + Erro);
        }
        
        Conexao.Desconectar();
        
        return Codigo;
        
    }
    
    private void LimpaSenha (String Codigo){
        
        String SQL;
        
        SQL = "update t_saida set senha = null where codigo = " + Codigo + " and exclusao = 0 ";
        
        Conexao = new ConexaoPostgresql();
        Conexao.Conectar() ;
        Conexao.setSQL(SQL);
        Conexao.Executar();
        Conexao.Desconectar();
        
    }
    
    private void Limpar(){
        
        jtfCodigo.setText("");
        jtfPedido.setText("");
        jtfDanfe.setText("");
        jdcDataDanfe.setDate(new java.util.Date());
        jdcDataSistema.setDate(new java.util.Date());
        jtfCodigoCliente.setText("");
        jtfNomeCliente.setText("");
        jtfCodigoProduto.setText("");
        jtfNomeProduto.setText("");
        jtfQtde.setText("");
        jtfPreco.setText("");
        jtfValorTotal.setText("");
        
        DefaultTableModel tableModel =(DefaultTableModel) jTable1.getModel();  
        tableModel.setNumRows(0);  
        
        jtpObs.setText("");
        
    }
    
    public void CarregarDados(String Codigo){
        
        String SQL, SQL2;
        
        SQL = "select ts.codigo, ts.pedido, ts.danfe, to_char(ts.data_danfe,'DD/MM/YYYY') as datadanfe, ";
        SQL = SQL + "to_char(ts.data_sistema,'DD/MM/YYYY') as datasistema, ";
        SQL = SQL + "ts.fornecedor_cod, (tp.nome) as fornecedor, ts.obs ";
        SQL = SQL + "from t_saida ts ";
        SQL = SQL + "inner join t_pessoa tp on tp.codigo = ts.fornecedor_cod ";
        SQL = SQL + "where ts.codigo = " + Codigo + " ";
        SQL = SQL + "and ts.exclusao = 0 ";
        
        Conexao = new ConexaoPostgresql();
        Conexao.Conectar() ;
        Conexao.setSQL(SQL);

        ResultSet RS = Conexao.Consultar();
        
        try{
            if (RS.next()){
                jtfCodigo.setText(RS.getString("codigo"));
                jtfPedido.setText(RS.getString("pedido"));
                jtfDanfe.setText(RS.getString("danfe"));
                jdcDataDanfe.setDateFormatString(RS.getString("datadanfe"));                
                jdcDataSistema.setDateFormatString(RS.getString("datasistema"));
                jtfCodigoCliente.setText(RS.getString("fornecedor_cod"));
                jtfNomeCliente.setText(RS.getString("fornecedor"));
                jtpObs.setText(RS.getString("obs"));
            }
        }catch (Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro na validação: " + Erro);
        }
        
        Conexao.Desconectar();
        
        SQL2 = "select tsi.codigo, tsi.saida_cod, tsi.produto_cod, (tpr.nome) as produto, tsi.qtde, tsi.valor ";
        SQL2 = SQL2 + "from t_saida_item tsi ";
        SQL2 = SQL2 + "inner join t_produto tpr on tpr.codigo = tsi.produto_cod ";
        SQL2 = SQL2 + "where tsi.saida_cod = " + Codigo + " ";
        SQL2 = SQL2 + "and tsi.exclusao = 0 ";
        
        Conexao2 = new ConexaoPostgresql();
        Conexao2.Conectar() ;
        Conexao2.setSQL(SQL2);

        ResultSet RS2 = Conexao2.Consultar();
        
        try{
            while (RS2.next()){
                DefaultTableModel Tabela = (DefaultTableModel) jTable1.getModel();
                Object[] CarLinha = {"UPD",RS2.getString("codigo"),RS2.getString("produto_cod"),RS2.getString("produto"),RS2.getString("qtde"),RS2.getString("valor")};
                Tabela.addRow(CarLinha);
            }
        }catch (Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro na validação: " + Erro);
        }
        
        Conexao2.Desconectar();
        
        ReCalculoTabela();
        
        jbtSalvar.setEnabled(false);
        
    }
    
    private void AtualizarEstoque(String Produto, String Qtde){
        
        String SQL = null;
        
        SQL = "update t_produto set qtde = " + Qtde + " where codigo = " + Produto + " ";
        
        Conexao = new ConexaoPostgresql();
        Conexao.Conectar() ;
        Conexao.setSQL(SQL);
        Conexao.Executar();
        Conexao.Desconectar();
        
    }
    
    private String QtdeEmEstoque (String Produto) {
        
        String Saldo = null;
        String SQL;
        
        SQL = "select qtde from t_produto where codigo = " + Produto + " ";
        
        Conexao = new ConexaoPostgresql();
        Conexao.Conectar() ;
        Conexao.setSQL(SQL);
        
        ResultSet RS = Conexao.Consultar();
        
        try{
            if (RS.next()){
                Saldo = RS.getString("qtde");
            }
        }catch (Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro na validação: " + Erro);
        }
        
        Conexao.Desconectar();
        
        return Saldo;
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jbtAdd;
    private javax.swing.JButton jbtDel;
    private javax.swing.JButton jbtExcluir;
    private javax.swing.JButton jbtNovo;
    private javax.swing.JButton jbtPesquisar;
    private javax.swing.JButton jbtSalvar;
    private com.toedter.calendar.JDateChooser jdcDataDanfe;
    private com.toedter.calendar.JDateChooser jdcDataSistema;
    private javax.swing.JLabel jlbCliente;
    private javax.swing.JLabel jlbCodigo;
    private javax.swing.JLabel jlbDanfe;
    private javax.swing.JLabel jlbDataDanfe;
    private javax.swing.JLabel jlbDataSistema;
    private javax.swing.JLabel jlbObs;
    private javax.swing.JLabel jlbPedido;
    private javax.swing.JLabel jlbPrelco;
    private javax.swing.JLabel jlbProduto;
    private javax.swing.JLabel jlbQtde;
    private javax.swing.JLabel jlbValorTotal;
    private javax.swing.JFormattedTextField jtfCodigo;
    private javax.swing.JFormattedTextField jtfCodigoCliente;
    private javax.swing.JFormattedTextField jtfCodigoProduto;
    private javax.swing.JFormattedTextField jtfDanfe;
    private javax.swing.JFormattedTextField jtfNomeCliente;
    private javax.swing.JFormattedTextField jtfNomeProduto;
    private javax.swing.JFormattedTextField jtfPedido;
    private javax.swing.JFormattedTextField jtfPreco;
    private javax.swing.JFormattedTextField jtfQtde;
    private javax.swing.JFormattedTextField jtfValorTotal;
    private javax.swing.JTextPane jtpObs;
    // End of variables declaration//GEN-END:variables
}
